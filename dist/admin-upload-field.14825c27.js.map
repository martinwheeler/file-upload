{"version":3,"sources":["admin-upload-field.tsx"],"names":[],"mappings":";AA+HC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,WAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,yBAAA,EA/HD,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,aACA,EAAA,QAAA,mBACA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,yBACA,EAAA,QAAA,mBA0HC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxHM,IAAM,EAAsB,CACjC,KAAM,OACN,MAAO,eACP,MAAO,CACL,YACE,qJACF,YAAa,gCACb,KAAM,WACN,MAAO,eACP,GAAI,KACJ,UAAU,EACV,UAAU,IAWd,SAAS,EAAW,GACZ,IAAA,EAAQ,IAAI,MAEd,GAAA,GAAW,EAAQ,cAAe,CAC9B,IAAA,EAAS,EAAQ,cAEvB,EAAO,UAAU,WAAY,WACrB,IAAA,GAAgB,EAAc,EAAA,eAAA,GAQhC,QANkB,IAAlB,IACF,EAAM,QAAU,6CACF,EAAA,cAAA,OAAO,IAInB,IAAkB,EAAY,YAAA,IAAK,CAE/B,IAAA,EAAa,EAAO,OAAO,aAC3B,EAAU,EAAW,IAAI,WAGP,SAApB,EAAQ,GAAG,OACb,EAAQ,QAAQ,GAGhB,EAAW,IAAI,UAAW,IAK1B,GAAA,IAAkB,EAAY,YAAA,KAAM,CAChC,IAAA,EAAS,EAAO,SAAS,UAC/B,EAAO,MAAM,aAAc,WACzB,EACG,IAAI,cACJ,IAAI,2BACJ,KAAK,SAAS,GAEX,EAAM,IAAI,wCACV,EACG,IAAI,uCACJ,IAAI,aACJ,QAAQ,eAAiB,GAE5B,EAAM,SAAS,qBAS/B,SAAS,EAAiB,GACpB,GAAA,GAAW,EAAQ,cAAe,CAC9B,IAAA,EAAS,EAAQ,cAGnB,IAFkB,EAAc,EAAA,eAAA,KAEd,EAAY,YAAA,cAChC,OAIF,EAAO,OAAO,KAAK,KAAK,CACtB,KAAM,UACN,SAAU,UACV,UAAW,CACT,UAAW,WAAM,OAAA,EAAA,QAAA,cAAA,OAAA,CAAM,GAAG,eAC1B,MAAO,CACL,QAAS,WAAO,MAAA,CACd,SAAS,MAIf,UAAW,GACX,YAAa,KAIf,EAAE,OAAO,MAAM,0BAA2B,SAAA,GACpC,GAAW,YAAX,EAAE,KAAoB,CAClB,IAAA,EAAU,EAAO,OAAO,YAAY,QAAQ,QAAQ,MAAO,IACjE,WAAW,YAEP,EAAA,EAAA,QAAA,EAAA,QAAA,cAAC,EAAD,QAAQ,CAAC,QAAS,IAClB,OAAO,IAAI,SAAS,cAAc,qBAS9C,SAAS,KACP,EAAA,EAAA,oBACA,EAAE,OAAO,OAAO,qBAAsB,GACtC,EAAE,OAAO,MAAM,qBAAsB,GACtC,QAAA,oBAAA","file":"admin-upload-field.14825c27.js","sourceRoot":"../src","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { injectStyleSheet } from \"./utils/styling\";\nimport { getDialogType, DIALOG_TYPE } from \"./utils/squarespace\";\nimport Uploads from \"./components/uploads\";\nimport { bugsnagClient } from \"./utils/bugsnag\";\n\nexport const UPLOAD_FIELD_CONFIG = {\n  icon: \"file\",\n  title: \"Upload Files\",\n  value: {\n    description:\n      \"FileField;MaxSize=10240;Multiple;ButtonLabel=Add_Your_Files;RequiredField=Email;RequiredFieldMessage=Enter_your_email_before_uploading_your_files.\",\n    placeholder: \".jpg, .jpeg, .png, .gif, .txt\",\n    type: \"textarea\",\n    title: \"Upload Files\",\n    id: null,\n    required: false,\n    textarea: true\n  }\n};\n\n/**\n * Handles injecting the custom upload field when adding a new field.\n * Also handles injecting the custom upload field when editing the\n * fields.\n *\n * @param {*} a\n */\nfunction dialogInit(element) {\n  const error = new Error();\n\n  if (element && element.currentTarget) {\n    const dialog = element.currentTarget;\n\n    dialog.onceAfter(\"rendered\", () => {\n      const currentDialog = getDialogType(dialog);\n\n      if (currentDialog === undefined) {\n        error.message = \"User could not detect which dialog opened.\";\n        bugsnagClient.notify(error);\n      }\n\n      // Shows the field when adding a form field\n      if (currentDialog === DIALOG_TYPE.ADD) {\n        // Gets the form field options that will be shown\n        const formFields = dialog.fields.fieldOptions;\n        const options = formFields.get(\"options\");\n\n        // Injects the upload file option at the top of the list\n        if (options[0].icon !== \"file\") {\n          options.unshift(UPLOAD_FIELD_CONFIG);\n\n          // Updates the options the user will see\n          formFields.set(\"options\", options);\n        }\n      }\n\n      // Shows the field when editing the form fields\n      if (currentDialog === DIALOG_TYPE.EDIT) {\n        const fields = dialog.getField(\"fields\");\n        fields.after(\"dataChange\", function() {\n          fields\n            .get(\"contentBox\")\n            .all(\".sqs-form-builder-field\")\n            .each(function(field) {\n              if (\n                field.one('textarea[placeholder=\"Description\"]') &&\n                field\n                  .one('textarea[placeholder=\"Description\"]')\n                  .get(\"innerText\")\n                  .indexOf(\"FileField;\") > -1\n              ) {\n                field.addClass(\"icon-file\");\n              }\n            });\n        });\n      }\n    });\n  }\n}\n\nfunction uploadDialogInit(element) {\n  if (element && element.currentTarget) {\n    const dialog = element.currentTarget;\n    const currentDialog = getDialogType(dialog);\n\n    if (currentDialog !== DIALOG_TYPE.PAGE_SETTINGS) {\n      return;\n    }\n\n    // TODO: Inject react component to be used to show the uploaded files\n    dialog.params.tabs.push({\n      name: \"uploads\",\n      tabTitle: \"Uploads\",\n      reactData: {\n        component: () => <span id=\"uploadApp\" />,\n        props: {\n          getData: () => ({\n            isDirty: false\n          })\n        }\n      },\n      tabFields: [],\n      tabPanelObj: {}\n    });\n\n    // Render after upload tab is chosen\n    Y.Global.after(\"EditingDialog:tab-shown\", e => {\n      if (e.name === \"uploads\") {\n        const pageUrl = dialog.params.initialData.fullUrl.replace(/^\\//, \"\");\n        setTimeout(() => {\n          render(\n            <Uploads pageUrl={pageUrl} />,\n            window.top.document.querySelector(\"#uploadApp\")\n          );\n        });\n      }\n    });\n  }\n}\n\n// Sets up event listener to show upload field in correct dialogs\nfunction initDialog() {\n  injectStyleSheet();\n  Y.Global.before(\"EditingDialog:show\", uploadDialogInit);\n  Y.Global.after(\"EditingDialog:show\", dialogInit);\n}\n\nexport { dialogInit, initDialog, uploadDialogInit };\n"]}